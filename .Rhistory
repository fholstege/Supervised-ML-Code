vY_R1 <- vY[vIndex_R1]
vY_R2 <- vY[vIndex_R2]
fNew_loss <- vOptimal_split_branch[2]
fImprovement <- (fNew_loss - fBenchmark_loss)/fBenchmark_loss
dfSplits<- rbind(dfSplits, c(colnames(mX)[vOptimal_split_branch[3]], k, node_id, fImprovement, vOptimal_split_branch[1] ))
# set column names
colnames(dfSplits) <- c("variable", "level", "id", "improvement", "index")
dfSplits <<- dfSplits
print(dfSplits)
R1_Tree <- TreeBuilder(mX <- mX_R1, vY_R1, maxDepth = maxDepth - 1, minObs, k, node_id = 1, bLeaf, dfSplits<-dfSplits)
R2_Tree <- TreeBuilder(mX <- mX_R2, vY_R2, maxDepth = maxDepth - 1, minObs, k, node_id = 2, bLeaf, dfSplits<-dfSplits)
}
}
}
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
TreeBuilder <- function(mX, vY, maxDepth, minObs, k, node_id, bLeaf, dfSplits){
fBenchmark_loss <- sum((vY - mean(vY))^2)
iNodecounter <<- 0
while(k < maxDepth & bLeaf == FALSE ){
k = k + 1
vOptimal_split_branch <- c(NA, Inf, 0)
for(iBranch_index in 1:NCOL(mX)){
vBranch = mX[,iBranch_index]
vOptimal_split <- splitFunction(vY, vBranch, minObs)
if(is.na(vOptimal_split[2])){
next
}
if(vOptimal_split[2]<vOptimal_split_branch[2]){
vOptimal_split_branch <- c(vOptimal_split,iBranch_index)
}
}
# make the split
vIndex_R1 <- mX[,vOptimal_split_branch[3]]<= vOptimal_split_branch[1]
vIndex_R2 <- mX[,vOptimal_split_branch[3]] > vOptimal_split_branch[1]
if(NCOL(mX)==1){
bLeaf <- TRUE
}else{
mX_R1 <- as.matrix(mX[vIndex_R1,])
mX_R2 <- as.matrix(mX[vIndex_R2,])
vY_R1 <- vY[vIndex_R1]
vY_R2 <- vY[vIndex_R2]
fNew_loss <- vOptimal_split_branch[2]
fImprovement <- (fNew_loss - fBenchmark_loss)/fBenchmark_loss
dfSplits<<- rbind(dfSplits, c(colnames(mX)[vOptimal_split_branch[3]], k, node_id, fImprovement, vOptimal_split_branch[1] ))
# set column names
colnames(dfSplits) <- c("variable", "level", "id", "improvement", "index")
dfSplits <<- dfSplits
print(dfSplits)
R1_Tree <- TreeBuilder(mX <- mX_R1, vY_R1, maxDepth = maxDepth - 1, minObs, k, node_id = 1, bLeaf, dfSplits<-dfSplits)
R2_Tree <- TreeBuilder(mX <- mX_R2, vY_R2, maxDepth = maxDepth - 1, minObs, k, node_id = 2, bLeaf, dfSplits<-dfSplits)
}
}
}
dfSplits <<- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
TreeBuilder <- function(mX, vY, maxDepth, minObs, k, node_id, bLeaf, dfSplits){
fBenchmark_loss <- sum((vY - mean(vY))^2)
iNodecounter <<- 0
while(k < maxDepth & bLeaf == FALSE ){
k = k + 1
vOptimal_split_branch <- c(NA, Inf, 0)
for(iBranch_index in 1:NCOL(mX)){
vBranch = mX[,iBranch_index]
vOptimal_split <- splitFunction(vY, vBranch, minObs)
if(is.na(vOptimal_split[2])){
next
}
if(vOptimal_split[2]<vOptimal_split_branch[2]){
vOptimal_split_branch <- c(vOptimal_split,iBranch_index)
}
}
# make the split
vIndex_R1 <- mX[,vOptimal_split_branch[3]]<= vOptimal_split_branch[1]
vIndex_R2 <- mX[,vOptimal_split_branch[3]] > vOptimal_split_branch[1]
if(NCOL(mX)==1){
bLeaf <- TRUE
}else{
mX_R1 <- as.matrix(mX[vIndex_R1,])
mX_R2 <- as.matrix(mX[vIndex_R2,])
vY_R1 <- vY[vIndex_R1]
vY_R2 <- vY[vIndex_R2]
fNew_loss <- vOptimal_split_branch[2]
fImprovement <- (fNew_loss - fBenchmark_loss)/fBenchmark_loss
dfSplits<<- rbind(dfSplits, c(colnames(mX)[vOptimal_split_branch[3]], k, node_id, fImprovement, vOptimal_split_branch[1] ))
# set column names
colnames(dfSplits) <- c("variable", "level", "id", "improvement", "index")
dfSplits <<- dfSplits
print(dfSplits)
R1_Tree <- TreeBuilder(mX <- mX_R1, vY_R1, maxDepth = maxDepth - 1, minObs, k, node_id = 1, bLeaf, dfSplits<-dfSplits)
R2_Tree <- TreeBuilder(mX <- mX_R2, vY_R2, maxDepth = maxDepth - 1, minObs, k, node_id = 2, bLeaf, dfSplits<-dfSplits)
}
}
}
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
TreeBuilder <- function(mX, vY, maxDepth, minObs, k, node_id, bLeaf, dfSplits){
fBenchmark_loss <- sum((vY - mean(vY))^2)
iNodecounter <<- 0
while(k < maxDepth & bLeaf == FALSE ){
k = k + 1
vOptimal_split_branch <- c(NA, Inf, 0)
for(iBranch_index in 1:NCOL(mX)){
vBranch = mX[,iBranch_index]
vOptimal_split <- splitFunction(vY, vBranch, minObs)
if(is.na(vOptimal_split[2])){
next
}
if(vOptimal_split[2]<vOptimal_split_branch[2]){
vOptimal_split_branch <- c(vOptimal_split,iBranch_index)
}
}
# make the split
vIndex_R1 <- mX[,vOptimal_split_branch[3]]<= vOptimal_split_branch[1]
vIndex_R2 <- mX[,vOptimal_split_branch[3]] > vOptimal_split_branch[1]
if(NCOL(mX)==1){
bLeaf <- TRUE
}else{
mX_R1 <- as.matrix(mX[vIndex_R1,])
mX_R2 <- as.matrix(mX[vIndex_R2,])
vY_R1 <- vY[vIndex_R1]
vY_R2 <- vY[vIndex_R2]
fNew_loss <- vOptimal_split_branch[2]
fImprovement <- (fNew_loss - fBenchmark_loss)/fBenchmark_loss
dfSplits<- rbind(dfSplits, c(colnames(mX)[vOptimal_split_branch[3]], k, node_id, fImprovement, vOptimal_split_branch[1] ))
# set column names
colnames(dfSplits) <- c("variable", "level", "id", "improvement", "index")
new_dfSplits <<- dfSplits
print(dfSplits)
R1_Tree <- TreeBuilder(mX <- mX_R1, vY_R1, maxDepth = maxDepth - 1, minObs, k, node_id = 1, bLeaf, new_dfSplits)
R2_Tree <- TreeBuilder(mX <- mX_R2, vY_R2, maxDepth = maxDepth - 1, minObs, k, node_id = 2, bLeaf, new_dfSplits)
}
}
}
dfSplits <<- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
dfSplits <<- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
dfSplits <- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
TreeBuilder <- function(mX, vY, maxDepth, minObs, k, node_id, bLeaf, dfSplits){
fBenchmark_loss <- sum((vY - mean(vY))^2)
iNodecounter <<- 0
while(k < maxDepth & bLeaf == FALSE ){
k = k + 1
vOptimal_split_branch <- c(NA, Inf, 0)
for(iBranch_index in 1:NCOL(mX)){
vBranch = mX[,iBranch_index]
vOptimal_split <- splitFunction(vY, vBranch, minObs)
if(is.na(vOptimal_split[2])){
next
}
if(vOptimal_split[2]<vOptimal_split_branch[2]){
vOptimal_split_branch <- c(vOptimal_split,iBranch_index)
}
}
# make the split
vIndex_R1 <- mX[,vOptimal_split_branch[3]]<= vOptimal_split_branch[1]
vIndex_R2 <- mX[,vOptimal_split_branch[3]] > vOptimal_split_branch[1]
if(NCOL(mX)==1){
bLeaf <- TRUE
}else{
mX_R1 <- as.matrix(mX[vIndex_R1,])
mX_R2 <- as.matrix(mX[vIndex_R2,])
vY_R1 <- vY[vIndex_R1]
vY_R2 <- vY[vIndex_R2]
fNew_loss <- vOptimal_split_branch[2]
fImprovement <- (fNew_loss - fBenchmark_loss)/fBenchmark_loss
dfSplits<- rbind(dfSplits, c(colnames(mX)[vOptimal_split_branch[3]], k, node_id, fImprovement, vOptimal_split_branch[1] ))
dfSplits <<- dfSplits
# set column names
colnames(dfSplits) <- c("variable", "level", "id", "improvement", "index")
R1_Tree <- TreeBuilder(mX <- mX_R1, vY_R1, maxDepth = maxDepth - 1, minObs, k, node_id = 1, bLeaf, dfSplits <- dfSplits)
R2_Tree <- TreeBuilder(mX <- mX_R2, vY_R2, maxDepth = maxDepth - 1, minObs, k, node_id = 2, bLeaf, dfSplits <- dfSplits)
}
}
}
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
dfSplits <- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
View(dfSplits)
TreeBuilder <- function(mX, vY, maxDepth, minObs, k, node_id, bLeaf, dfSplits = NA){
fBenchmark_loss <- sum((vY - mean(vY))^2)
iNodecounter <<- 0
while(k < maxDepth & bLeaf == FALSE ){
k = k + 1
vOptimal_split_branch <- c(NA, Inf, 0)
for(iBranch_index in 1:NCOL(mX)){
vBranch = mX[,iBranch_index]
vOptimal_split <- splitFunction(vY, vBranch, minObs)
if(is.na(vOptimal_split[2])){
next
}
if(vOptimal_split[2]<vOptimal_split_branch[2]){
vOptimal_split_branch <- c(vOptimal_split,iBranch_index)
}
}
# make the split
vIndex_R1 <- mX[,vOptimal_split_branch[3]]<= vOptimal_split_branch[1]
vIndex_R2 <- mX[,vOptimal_split_branch[3]] > vOptimal_split_branch[1]
if(NCOL(mX)==1){
bLeaf <- TRUE
}else{
mX_R1 <- as.matrix(mX[vIndex_R1,])
mX_R2 <- as.matrix(mX[vIndex_R2,])
vY_R1 <- vY[vIndex_R1]
vY_R2 <- vY[vIndex_R2]
fNew_loss <- vOptimal_split_branch[2]
fImprovement <- (fNew_loss - fBenchmark_loss)/fBenchmark_loss
dfSplits<- rbind(dfSplits, c(colnames(mX)[vOptimal_split_branch[3]], k, node_id, fImprovement, vOptimal_split_branch[1] ))
dfSplits <<- dfSplits
# set column names
colnames(dfSplits) <- c("variable", "level", "id", "improvement", "index")
R1_Tree <- TreeBuilder(mX <- mX_R1, vY_R1, maxDepth = maxDepth - 1, minObs, k, node_id = 1, bLeaf)
R2_Tree <- TreeBuilder(mX <- mX_R2, vY_R2, maxDepth = maxDepth - 1, minObs, k, node_id = 2, bLeaf)
}
}
}
mSmoke <- Smoke %>%
select(educ, age, cigs) %>%
as.matrix()
mX_smoke <- mSmoke[,-3]
vY_smoke <- mSmoke[,3]
dfSplits <- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
dfSplits <- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
TreeBuilder <- function(mX, vY, maxDepth, minObs, k, node_id, bLeaf, dfSplits = NA){
fBenchmark_loss <- sum((vY - mean(vY))^2)
iNodecounter <<- 0
while(k < maxDepth & bLeaf == FALSE ){
k = k + 1
vOptimal_split_branch <- c(NA, Inf, 0)
for(iBranch_index in 1:NCOL(mX)){
vBranch = mX[,iBranch_index]
vOptimal_split <- splitFunction(vY, vBranch, minObs)
if(is.na(vOptimal_split[2])){
next
}
if(vOptimal_split[2]<vOptimal_split_branch[2]){
vOptimal_split_branch <- c(vOptimal_split,iBranch_index)
}
}
# make the split
vIndex_R1 <- mX[,vOptimal_split_branch[3]]<= vOptimal_split_branch[1]
vIndex_R2 <- mX[,vOptimal_split_branch[3]] > vOptimal_split_branch[1]
if(NCOL(mX)==1){
bLeaf <- TRUE
}else{
mX_R1 <- as.matrix(mX[vIndex_R1,])
mX_R2 <- as.matrix(mX[vIndex_R2,])
vY_R1 <- vY[vIndex_R1]
vY_R2 <- vY[vIndex_R2]
fNew_loss <- vOptimal_split_branch[2]
fImprovement <- (fNew_loss - fBenchmark_loss)/fBenchmark_loss
dfSplits<- rbind(dfSplits, c(colnames(mX)[vOptimal_split_branch[3]], k, node_id, fImprovement, vOptimal_split_branch[1] ))
dfSplits <<- dfSplits
print(dfSplits)
# set column names
colnames(dfSplits) <- c("variable", "level", "id", "improvement", "index")
R1_Tree <- TreeBuilder(mX <- mX_R1, vY_R1, maxDepth = maxDepth - 1, minObs, k, node_id = 1, bLeaf)
R2_Tree <- TreeBuilder(mX <- mX_R2, vY_R2, maxDepth = maxDepth - 1, minObs, k, node_id = 2, bLeaf)
}
}
}
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
dfSplits <- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
TreeBuilder <- function(mX, vY, maxDepth, minObs, k, node_id, bLeaf, dfSplits = NA){
fBenchmark_loss <- sum((vY - mean(vY))^2)
iNodecounter <<- 0
while(k < maxDepth & bLeaf == FALSE ){
k = k + 1
vOptimal_split_branch <- c(NA, Inf, 0)
for(iBranch_index in 1:NCOL(mX)){
vBranch = mX[,iBranch_index]
vOptimal_split <- splitFunction(vY, vBranch, minObs)
if(is.na(vOptimal_split[2])){
next
}
if(vOptimal_split[2]<vOptimal_split_branch[2]){
vOptimal_split_branch <- c(vOptimal_split,iBranch_index)
}
}
# make the split
vIndex_R1 <- mX[,vOptimal_split_branch[3]]<= vOptimal_split_branch[1]
vIndex_R2 <- mX[,vOptimal_split_branch[3]] > vOptimal_split_branch[1]
if(NCOL(mX)==1){
bLeaf <- TRUE
}else{
mX_R1 <- as.matrix(mX[vIndex_R1,])
mX_R2 <- as.matrix(mX[vIndex_R2,])
vY_R1 <- vY[vIndex_R1]
vY_R2 <- vY[vIndex_R2]
fNew_loss <- vOptimal_split_branch[2]
fImprovement <- (fNew_loss - fBenchmark_loss)/fBenchmark_loss
print(dfSplits)
dfSplits<- rbind(dfSplits, c(colnames(mX)[vOptimal_split_branch[3]], k, node_id, fImprovement, vOptimal_split_branch[1] ))
dfSplits <<- dfSplits
# set column names
colnames(dfSplits) <- c("variable", "level", "id", "improvement", "index")
R1_Tree <- TreeBuilder(mX <- mX_R1, vY_R1, maxDepth = maxDepth - 1, minObs, k, node_id = 1, bLeaf)
R2_Tree <- TreeBuilder(mX <- mX_R2, vY_R2, maxDepth = maxDepth - 1, minObs, k, node_id = 2, bLeaf)
}
}
}
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
dfSplits <- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
TreeBuilder <- function(mX, vY, maxDepth, minObs, k, node_id, bLeaf, dfSplits = NA){
fBenchmark_loss <- sum((vY - mean(vY))^2)
iNodecounter <<- 0
while(k < maxDepth & bLeaf == FALSE ){
k = k + 1
vOptimal_split_branch <- c(NA, Inf, 0)
for(iBranch_index in 1:NCOL(mX)){
vBranch = mX[,iBranch_index]
vOptimal_split <- splitFunction(vY, vBranch, minObs)
if(is.na(vOptimal_split[2])){
next
}
if(vOptimal_split[2]<vOptimal_split_branch[2]){
vOptimal_split_branch <- c(vOptimal_split,iBranch_index)
}
}
# make the split
vIndex_R1 <- mX[,vOptimal_split_branch[3]]<= vOptimal_split_branch[1]
vIndex_R2 <- mX[,vOptimal_split_branch[3]] > vOptimal_split_branch[1]
if(NCOL(mX)==1){
bLeaf <- TRUE
}else{
mX_R1 <- as.matrix(mX[vIndex_R1,])
mX_R2 <- as.matrix(mX[vIndex_R2,])
vY_R1 <- vY[vIndex_R1]
vY_R2 <- vY[vIndex_R2]
fNew_loss <- vOptimal_split_branch[2]
fImprovement <- (fNew_loss - fBenchmark_loss)/fBenchmark_loss
print(dfSplits)
dfSplits<- rbind(dfSplits, c(colnames(mX)[vOptimal_split_branch[3]], k, node_id, fImprovement, vOptimal_split_branch[1] ))
print(dfSplits)
dfSplits <<- dfSplits
# set column names
colnames(dfSplits) <- c("variable", "level", "id", "improvement", "index")
R1_Tree <- TreeBuilder(mX <- mX_R1, vY_R1, maxDepth = maxDepth - 1, minObs, k, node_id = 1, bLeaf)
R2_Tree <- TreeBuilder(mX <- mX_R2, vY_R2, maxDepth = maxDepth - 1, minObs, k, node_id = 2, bLeaf)
}
}
}
dfSplits <- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
TreeBuilder <- function(mX, vY, maxDepth, minObs, k, node_id, bLeaf, dfSplits = NA){
fBenchmark_loss <- sum((vY - mean(vY))^2)
iNodecounter <<- 0
while(k < maxDepth & bLeaf == FALSE ){
k = k + 1
vOptimal_split_branch <- c(NA, Inf, 0)
for(iBranch_index in 1:NCOL(mX)){
vBranch = mX[,iBranch_index]
vOptimal_split <- splitFunction(vY, vBranch, minObs)
if(is.na(vOptimal_split[2])){
next
}
if(vOptimal_split[2]<vOptimal_split_branch[2]){
vOptimal_split_branch <- c(vOptimal_split,iBranch_index)
}
}
# make the split
vIndex_R1 <- mX[,vOptimal_split_branch[3]]<= vOptimal_split_branch[1]
vIndex_R2 <- mX[,vOptimal_split_branch[3]] > vOptimal_split_branch[1]
if(NCOL(mX)==1){
bLeaf <- TRUE
}else{
mX_R1 <- as.matrix(mX[vIndex_R1,])
mX_R2 <- as.matrix(mX[vIndex_R2,])
vY_R1 <- vY[vIndex_R1]
vY_R2 <- vY[vIndex_R2]
fNew_loss <- vOptimal_split_branch[2]
fImprovement <- (fNew_loss - fBenchmark_loss)/fBenchmark_loss
print(dfSplits)
dfSplits<- rbind(dfSplits, c(colnames(mX)[vOptimal_split_branch[3]], k, node_id, fImprovement, vOptimal_split_branch[1] ))
dfSplits <<- dfSplits
# set column names
colnames(dfSplits) <- c("variable", "level", "id", "improvement", "index")
print(dfSplits)
R1_Tree <- TreeBuilder(mX <- mX_R1, vY_R1, maxDepth = maxDepth - 1, minObs, k, node_id = 1, bLeaf)
R2_Tree <- TreeBuilder(mX <- mX_R2, vY_R2, maxDepth = maxDepth - 1, minObs, k, node_id = 2, bLeaf)
}
}
}
vY_smoke <- mSmoke[,3]
dfSplits <- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
TreeBuilder <- function(mX, vY, maxDepth, minObs, k, node_id, bLeaf, dfSplits = NA){
fBenchmark_loss <- sum((vY - mean(vY))^2)
iNodecounter <<- 0
while(k < maxDepth & bLeaf == FALSE ){
k = k + 1
vOptimal_split_branch <- c(NA, Inf, 0)
for(iBranch_index in 1:NCOL(mX)){
vBranch = mX[,iBranch_index]
vOptimal_split <- splitFunction(vY, vBranch, minObs)
if(is.na(vOptimal_split[2])){
next
}
if(vOptimal_split[2]<vOptimal_split_branch[2]){
vOptimal_split_branch <- c(vOptimal_split,iBranch_index)
}
}
# make the split
vIndex_R1 <- mX[,vOptimal_split_branch[3]]<= vOptimal_split_branch[1]
vIndex_R2 <- mX[,vOptimal_split_branch[3]] > vOptimal_split_branch[1]
if(NCOL(mX)==1){
bLeaf <- TRUE
}else{
mX_R1 <- as.matrix(mX[vIndex_R1,])
mX_R2 <- as.matrix(mX[vIndex_R2,])
vY_R1 <- vY[vIndex_R1]
vY_R2 <- vY[vIndex_R2]
fNew_loss <- vOptimal_split_branch[2]
fImprovement <- (fNew_loss - fBenchmark_loss)/fBenchmark_loss
dfSplits<- rbind(dfSplits, c(colnames(mX)[vOptimal_split_branch[3]], k, node_id, fImprovement, vOptimal_split_branch[1] ))
dfSplits <<- dfSplits
# set column names
colnames(dfSplits) <- c("variable", "level", "id", "improvement", "index")
print(dfSplits)
R1_Tree <- TreeBuilder(mX <- mX_R1, vY_R1, maxDepth = maxDepth - 1, minObs, k, node_id = 1, bLeaf)
R2_Tree <- TreeBuilder(mX <- mX_R2, vY_R2, maxDepth = maxDepth - 1, minObs, k, node_id = 2, bLeaf)
}
}
}
dfSplits <- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
TreeBuilder <- function(mX, vY, maxDepth, minObs, k, node_id, bLeaf, dfSplits = NA){
fBenchmark_loss <- sum((vY - mean(vY))^2)
iNodecounter <<- 0
while(k < maxDepth & bLeaf == FALSE ){
k = k + 1
vOptimal_split_branch <- c(NA, Inf, 0)
for(iBranch_index in 1:NCOL(mX)){
vBranch = mX[,iBranch_index]
vOptimal_split <- splitFunction(vY, vBranch, minObs)
if(is.na(vOptimal_split[2])){
next
}
if(vOptimal_split[2]<vOptimal_split_branch[2]){
vOptimal_split_branch <- c(vOptimal_split,iBranch_index)
}
}
# make the split
vIndex_R1 <- mX[,vOptimal_split_branch[3]]<= vOptimal_split_branch[1]
vIndex_R2 <- mX[,vOptimal_split_branch[3]] > vOptimal_split_branch[1]
if(NCOL(mX)==1){
bLeaf <- TRUE
}else{
mX_R1 <- as.matrix(mX[vIndex_R1,])
mX_R2 <- as.matrix(mX[vIndex_R2,])
vY_R1 <- vY[vIndex_R1]
vY_R2 <- vY[vIndex_R2]
fNew_loss <- vOptimal_split_branch[2]
fImprovement <- (fNew_loss - fBenchmark_loss)/fBenchmark_loss
dfSplits<- rbind(dfSplits, c(colnames(mX)[vOptimal_split_branch[3]], k, node_id, fImprovement, vOptimal_split_branch[1] ))
dfSplits <<- dfSplits
# set column names
colnames(dfSplits) <- c("variable", "level", "id", "improvement", "index")
print(dfSplits)
R1_Tree <- TreeBuilder(mX <- mX_R1, vY_R1, maxDepth = maxDepth - 1, minObs, k, node_id = 1, bLeaf, dfSplits = dfSplits)
R2_Tree <- TreeBuilder(mX <- mX_R2, vY_R2, maxDepth = maxDepth - 1, minObs, k, node_id = 2, bLeaf, dfSplits = dfSPlits)
}
}
}
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
dfSplits <- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
TreeBuilder <- function(mX, vY, maxDepth, minObs, k, node_id, bLeaf, dfSplits = NA){
fBenchmark_loss <- sum((vY - mean(vY))^2)
iNodecounter <<- 0
while(k < maxDepth & bLeaf == FALSE ){
k = k + 1
vOptimal_split_branch <- c(NA, Inf, 0)
for(iBranch_index in 1:NCOL(mX)){
vBranch = mX[,iBranch_index]
vOptimal_split <- splitFunction(vY, vBranch, minObs)
if(is.na(vOptimal_split[2])){
next
}
if(vOptimal_split[2]<vOptimal_split_branch[2]){
vOptimal_split_branch <- c(vOptimal_split,iBranch_index)
}
}
# make the split
vIndex_R1 <- mX[,vOptimal_split_branch[3]]<= vOptimal_split_branch[1]
vIndex_R2 <- mX[,vOptimal_split_branch[3]] > vOptimal_split_branch[1]
if(NCOL(mX)==1){
bLeaf <- TRUE
}else{
mX_R1 <- as.matrix(mX[vIndex_R1,])
mX_R2 <- as.matrix(mX[vIndex_R2,])
vY_R1 <- vY[vIndex_R1]
vY_R2 <- vY[vIndex_R2]
fNew_loss <- vOptimal_split_branch[2]
fImprovement <- (fNew_loss - fBenchmark_loss)/fBenchmark_loss
dfSplits<- rbind(dfSplits, c(colnames(mX)[vOptimal_split_branch[3]], k, node_id, fImprovement, vOptimal_split_branch[1] ))
dfSplits <<- dfSplits
# set column names
colnames(dfSplits) <- c("variable", "level", "id", "improvement", "index")
print(dfSplits)
R1_Tree <- TreeBuilder(mX <- mX_R1, vY_R1, maxDepth = maxDepth - 1, minObs, k, node_id = 1, bLeaf, dfSplits = dfSplits)
R2_Tree <- TreeBuilder(mX <- mX_R2, vY_R2, maxDepth = maxDepth - 1, minObs, k, node_id = 2, bLeaf, dfSplits = dfSplits)
}
}
}
dfSplits <- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
dfSplits <<- data.frame(variable = character(), level = numeric(), id = numeric(), improvement = numeric(), index = numeric())
TreeBuilder(mX_smoke, vY_smoke, maxDepth = 3, minObs = 5, k=0, node_id = 1, bLeaf = FALSE, dfSplits)
