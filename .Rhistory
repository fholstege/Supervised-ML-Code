}
# if any splits left, set to leaf since done
if(any(tree_info$Status == "SPLIT")){
tree_info[which(tree_info$Status == "SPLIT"),]$Status <- "LEAF"
}
# get the leafs to get fitted values
leafs <- tree_info[tree_info$Status == "LEAF", ]
fitted <- c()
for (i in seq_len(nrow(leafs))) {
# extract index
ind <- as.numeric(rownames(subset(df, eval(parse(text = leafs[i, "Rule"])))))
# if numeric dependent, estimator is the mean y value of the leaf
if(is.numeric(y)){
fitted[ind] <- mean(y[ind])
# otherwise predict the category
}else{
fitted[ind] <- names(sort(table(y[ind]), decreasing = TRUE)[1])
}
}
# return everything
return(list(tree = tree_info, fit = fitted, formula = formula, data = data))
}
# function to build the regression tree
RegressionTree <- function(formula, df, minObs, maxDepth) {
# coerce to data.frame
df <- as.data.frame(df)
# handle formula
formula <- terms.formula(formula)
# get the independent variable matrix
X <- model.matrix(formula, df)
# get the dependent variable
y <- df[, as.character(formula)[2]]
# While TRUE, while loop continues
do_splits <- TRUE
# Create output data.frame with splitting rules and observations
# This dataframe also works to guide which next need to be taken
tree_info <- data.frame(Node_id = 1,
Variable = NA,
Index = NA,
Obs = nrow(df),
Rule = NA,
Status = "SPLIT",
stringsAsFactors = FALSE)
print(tree_info)
# keep splitting until there are only leafs left
while(do_splits) {
# Get indexes of which nodes need have to be splitted
vIndex_split <- which(tree_info$Status == "SPLIT")
# go through all to calculate
for (j in vIndex_split) {
# when not at the root node, select the subset based on the previous splits
if (!is.na(tree_info[j, "Rule"])) {
# subset data according to the rule
this_data <- subset(df, eval(parse(text = tree_info[j, "Rule"])))
# get the design matrix
X <- model.matrix(formula, this_data)
# in the first case, the split is over all the data
} else {
this_data <- df
}
# estimate splitting criteria
splitting <- apply(X, MARGIN = 2, FUN = splitFunction, y = y, minObs = minObs)
if(all(is.na(splitting))){
do_splits <- FALSE
}else{
# get the min metric (SSE/GINI)
tmp_splitter <- which.min(splitting[1,])
# define maxnode
mn <- max(tree_info$Node_id)
# paste rules for the upcoming split
tmp_rule <- c(paste(names(tmp_splitter), ">=", splitting[2,tmp_splitter]),paste(names(tmp_splitter), "<", splitting[2,tmp_splitter]))
# Check if the splitting rule has already been invoked to prevent appying the same rule twice
split_here  <- !sapply(tmp_rule,
FUN = function(x,y) any(grepl(x, x = y)),
y = tree_info$Rule)
# If empty, add the splitting rules
if (!is.na(tree_info[j, "Rule"])) {
tmp_rule  <- paste(tree_info[j, "Rule"],
tmp_rule, sep = " & ")
}
# get the number of observations in current node
tmp_nobs <- sapply(tmp_rule,
FUN = function(i, x) {
nrow(subset(x = x, subset = eval(parse(text = i))))
},
x = this_data)
# insufficient minObs for split
if (any(tmp_nobs <= minObs)) {
split_here <- rep(FALSE, 2)
}
# create children data frame
children <- data.frame(Node_id = c(mn+1, mn+2),
Variable =names(tmp_splitter),
Index = splitting[2,tmp_splitter],
Obs = tmp_nobs,
Rule = tmp_rule,
Status = rep("SPLIT", 2),
row.names = NULL)[split_here,]
# overwrite state of current node
tree_info[j, "Status"] <- ifelse(all(!split_here), "LEAF", "PARENT")
print(tree_info)
# bind everything
tree_info <- rbind(tree_info, children)
# check if there are any open splits left
do_splits <- !all(tree_info$Status != "SPLIT")
# check if at max depth
k <- length(unique(tree_info$Index))-1
# if no splits left, stop
if(all(tree_info$Status != "SPLIT")){
do_splits <- FALSE
# also stop if max depth reached
}else if(k>=maxDepth){
do_splits <- FALSE
}
}
}
}
# if any splits left, set to leaf since done
if(any(tree_info$Status == "SPLIT")){
tree_info[which(tree_info$Status == "SPLIT"),]$Status <- "LEAF"
}
# get the leafs to get fitted values
leafs <- tree_info[tree_info$Status == "LEAF", ]
fitted <- c()
for (i in seq_len(nrow(leafs))) {
# extract index
ind <- as.numeric(rownames(subset(df, eval(parse(text = leafs[i, "Rule"])))))
# if numeric dependent, estimator is the mean y value of the leaf
if(is.numeric(y)){
fitted[ind] <- mean(y[ind])
# otherwise predict the category
}else{
fitted[ind] <- names(sort(table(y[ind]), decreasing = TRUE)[1])
}
}
# return everything
return(list(tree = tree_info, fit = fitted, formula = formula, data = data))
}
# our tree
Our_smoke_tree <- RegressionTree(intention_to_smoke ~  age + alcohol_per_month, df = smoking, minObs = 10, maxDepth = 5)
# function to build the regression tree
RegressionTree <- function(formula, df, minObs, maxDepth) {
# coerce to data.frame
df <- as.data.frame(df)
# handle formula
formula <- terms.formula(formula)
# get the independent variable matrix
X <- model.matrix(formula, df)
# get the dependent variable
y <- df[, as.character(formula)[2]]
# While TRUE, while loop continues
do_splits <- TRUE
# Create output data.frame with splitting rules and observations
# This dataframe also works to guide which next need to be taken
tree_info <- data.frame(Node_id = 1,
Variable = NA,
Index = NA,
Obs = nrow(df),
Rule = NA,
Status = "SPLIT",
stringsAsFactors = FALSE)
print(tree_info)
print("---")
# keep splitting until there are only leafs left
while(do_splits) {
# Get indexes of which nodes need have to be splitted
vIndex_split <- which(tree_info$Status == "SPLIT")
# go through all to calculate
for (j in vIndex_split) {
# when not at the root node, select the subset based on the previous splits
if (!is.na(tree_info[j, "Rule"])) {
# subset data according to the rule
this_data <- subset(df, eval(parse(text = tree_info[j, "Rule"])))
# get the design matrix
X <- model.matrix(formula, this_data)
# in the first case, the split is over all the data
} else {
this_data <- df
}
# estimate splitting criteria
splitting <- apply(X, MARGIN = 2, FUN = splitFunction, y = y, minObs = minObs)
if(all(is.na(splitting))){
do_splits <- FALSE
}else{
# get the min metric (SSE/GINI)
tmp_splitter <- which.min(splitting[1,])
# define maxnode
mn <- max(tree_info$Node_id)
# paste rules for the upcoming split
tmp_rule <- c(paste(names(tmp_splitter), ">=", splitting[2,tmp_splitter]),paste(names(tmp_splitter), "<", splitting[2,tmp_splitter]))
# Check if the splitting rule has already been invoked to prevent appying the same rule twice
split_here  <- !sapply(tmp_rule,
FUN = function(x,y) any(grepl(x, x = y)),
y = tree_info$Rule)
# If empty, add the splitting rules
if (!is.na(tree_info[j, "Rule"])) {
tmp_rule  <- paste(tree_info[j, "Rule"],
tmp_rule, sep = " & ")
}
# get the number of observations in current node
tmp_nobs <- sapply(tmp_rule,
FUN = function(i, x) {
nrow(subset(x = x, subset = eval(parse(text = i))))
},
x = this_data)
# insufficient minObs for split
if (any(tmp_nobs <= minObs)) {
split_here <- rep(FALSE, 2)
}
# create children data frame
children <- data.frame(Node_id = c(mn+1, mn+2),
Variable =names(tmp_splitter),
Index = splitting[2,tmp_splitter],
Obs = tmp_nobs,
Rule = tmp_rule,
Status = rep("SPLIT", 2),
row.names = NULL)[split_here,]
# overwrite state of current node
tree_info[j, "Status"] <- ifelse(all(!split_here), "LEAF", "PARENT")
print(tree_info)
print("---")
# bind everything
tree_info <- rbind(tree_info, children)
# check if there are any open splits left
do_splits <- !all(tree_info$Status != "SPLIT")
# check if at max depth
k <- length(unique(tree_info$Index))-1
# if no splits left, stop
if(all(tree_info$Status != "SPLIT")){
do_splits <- FALSE
# also stop if max depth reached
}else if(k>=maxDepth){
do_splits <- FALSE
}
}
}
}
# if any splits left, set to leaf since done
if(any(tree_info$Status == "SPLIT")){
tree_info[which(tree_info$Status == "SPLIT"),]$Status <- "LEAF"
}
# get the leafs to get fitted values
leafs <- tree_info[tree_info$Status == "LEAF", ]
fitted <- c()
for (i in seq_len(nrow(leafs))) {
# extract index
ind <- as.numeric(rownames(subset(df, eval(parse(text = leafs[i, "Rule"])))))
# if numeric dependent, estimator is the mean y value of the leaf
if(is.numeric(y)){
fitted[ind] <- mean(y[ind])
# otherwise predict the category
}else{
fitted[ind] <- names(sort(table(y[ind]), decreasing = TRUE)[1])
}
}
# return everything
return(list(tree = tree_info, fit = fitted, formula = formula, data = data))
}
# our tree
Our_smoke_tree <- RegressionTree(intention_to_smoke ~  age + alcohol_per_month, df = smoking, minObs = 10, maxDepth = 5)
# function to build the regression tree
RegressionTree <- function(formula, df, minObs, maxDepth) {
# coerce to data.frame
df <- as.data.frame(df)
# handle formula
formula <- terms.formula(formula)
# get the independent variable matrix
X <- model.matrix(formula, df)
# get the dependent variable
y <- df[, as.character(formula)[2]]
# While TRUE, while loop continues
do_splits <- TRUE
# Create output data.frame with splitting rules and observations
# This dataframe also works to guide which next need to be taken
tree_info <- data.frame(Node_id = 1,
Variable = NA,
Index = NA,
Obs = nrow(df),
Rule = NA,
Status = "SPLIT",
stringsAsFactors = FALSE)
print(tree_info)
print("---")
# keep splitting until there are only leafs left
while(do_splits) {
# Get indexes of which nodes need have to be splitted
vIndex_split <- which(tree_info$Status == "SPLIT")
# go through all to calculate
for (j in vIndex_split) {
# when not at the root node, select the subset based on the previous splits
if (!is.na(tree_info[j, "Rule"])) {
# subset data according to the rule
this_data <- subset(df, eval(parse(text = tree_info[j, "Rule"])))
# get the design matrix
X <- model.matrix(formula, this_data)
# in the first case, the split is over all the data
} else {
this_data <- df
}
# estimate splitting criteria
splitting <- apply(X, MARGIN = 2, FUN = splitFunction, y = y, minObs = minObs)
if(all(is.na(splitting))){
do_splits <- FALSE
}else{
# get the min metric (SSE/GINI)
tmp_splitter <- which.min(splitting[1,])
# define maxnode
mn <- max(tree_info$Node_id)
# paste rules for the upcoming split
tmp_rule <- c(paste(names(tmp_splitter), ">=", splitting[2,tmp_splitter]),paste(names(tmp_splitter), "<", splitting[2,tmp_splitter]))
# Check if the splitting rule has already been invoked to prevent appying the same rule twice
split_here  <- !sapply(tmp_rule,
FUN = function(x,y) any(grepl(x, x = y)),
y = tree_info$Rule)
# If empty, add the splitting rules
if (!is.na(tree_info[j, "Rule"])) {
tmp_rule  <- paste(tree_info[j, "Rule"],
tmp_rule, sep = " & ")
}
# get the number of observations in current node
tmp_nobs <- sapply(tmp_rule,
FUN = function(i, x) {
nrow(subset(x = x, subset = eval(parse(text = i))))
},
x = this_data)
# insufficient minObs for split
if (any(tmp_nobs <= minObs)) {
split_here <- rep(FALSE, 2)
}
# create children data frame
children <- data.frame(Node_id = c(mn+1, mn+2),
Variable =names(tmp_splitter),
Index = splitting[2,tmp_splitter],
Obs = tmp_nobs,
Rule = tmp_rule,
Status = rep("SPLIT", 2),
row.names = NULL)[split_here,]
# overwrite state of current node
tree_info[j, "Status"] <- ifelse(all(!split_here), "LEAF", "PARENT")
print(tree_info)
print("---")
# bind everything
tree_info <- rbind(tree_info, children)
# check if there are any open splits left
do_splits <- !all(tree_info$Status != "SPLIT")
# check if at max depth
k <- length(unique(tree_info$Index))-1
# if no splits left, stop
if(all(tree_info$Status != "SPLIT")){
do_splits <- FALSE
# also stop if max depth reached
}else if(k>=maxDepth){
do_splits <- FALSE
}
}
}
}
# if any splits left, set to leaf since done
if(any(tree_info$Status == "SPLIT")){
tree_info[which(tree_info$Status == "SPLIT"),]$Status <- "LEAF"
}
# get the leafs to get fitted values
leafs <- tree_info[tree_info$Status == "LEAF", ]
fitted <- c()
print(tree_info)
for (i in seq_len(nrow(leafs))) {
# extract index
ind <- as.numeric(rownames(subset(df, eval(parse(text = leafs[i, "Rule"])))))
# if numeric dependent, estimator is the mean y value of the leaf
if(is.numeric(y)){
fitted[ind] <- mean(y[ind])
# otherwise predict the category
}else{
fitted[ind] <- names(sort(table(y[ind]), decreasing = TRUE)[1])
}
}
# return everything
return(list(tree = tree_info, fit = fitted, formula = formula, data = data))
}
# our tree
Our_smoke_tree <- RegressionTree(intention_to_smoke ~  age + alcohol_per_month, df = smoking, minObs = 10, maxDepth = 5)
# our tree
Our_smoke_tree <- RegressionTree(intention_to_smoke ~  age + alcohol_per_month, df = smoking, minObs = 10, maxDepth = 10)
# our tree
Our_smoke_tree <- RegressionTree(intention_to_smoke ~  age + alcohol_per_month, df = smoking, minObs = 10, maxDepth = 5)
test_list <- list(hallo = c(1,2,3))
test_list$hallo
for(i in range(0,3)){
test_list$i <- c(3,4,5)
}
View(test_list)
for(i in range(0,3)){
test_list$i <- c(1+i,2,3)
}
View(test_list)
test_list <- list()
list_names <- c("Floris", "Pieter", "Ramon")
for(i in range(0,length(list_names))){
test_list$i <- c(1+i,2,3)
names(test_list)[i]<-list_names[i]
}
test_list$i <- c(1+i,2,3)
test_list <- list()
list_names <- c("Floris", "Pieter", "Ramon")
for(i in range(0,length(list_names))){
test_list$i <- c(1+i,2,3)
names(test_list)[i]<-list_names[i]
}
for(i in range(0,length(list_names))){
test_list[,i] <- c(1+i,2,3)
names(test_list)[i]<-list_names[i]
}
test_list <- list()
list_names <- c("Floris", "Pieter", "Ramon")
for(i in range(0,length(list_names))){
test_list[,i] <- c(1+i,2,3)
names(test_list)[i]<-list_names[i]
}
for(i in range(0,length(list_names))){
test_list$i <- c(1+i,2,3)
print(test_list)
names(test_list)[i]<-list_names[i]
}
for(i in range(0,length(list_names))){
test_list$i <- c(1+i,2,3)
colnames(test_list)[i]<-list_names[i]
}
for(i in range(0,length(list_names))){
test_list$i <- c(1+i,2,3)
colnames(test_list[i])<-list_names[i]
}
for(i in range(0,length(list_names))){
test_list$i <- c(1+i,2,3)
print(list_names[i])
colnames(test_list[i])<-list_names[i]
}
list_names <- c("Floris", "Pieter", "Ramon")
list_names[1]
for(i in range(1,length(list_names))){
test_list$i <- c(1+i,2,3)
print(list_names[i])
colnames(test_list[i])<-list_names[i]
}
for(i in range(1,length(list_names))){
test_list$i <- c(1+i,2,3)
print(list_names[i])
colnames(test_list)[i]<-list_names[i]
}
for(i in range(1,length(list_names))){
test_list$i <- c(1+i,2,3)
print(list_names[i])
print(colnames(test_list)[i])
}
list_names <- c("Floris", "Pieter", "Ramon")
for(i in range(1,length(list_names))){
test_list$i <- c(1+i,2,3)
print(list_names[i])
print(colnames(test_list)[i])
}
list_names[1]
test_df <- data.frame(c(1,2,3), c(2,3,4), c(3,4,5))
test_df <- data.frame()
list_names <- c("Floris", "Pieter", "Ramon")
test_df <- data.frame()
list_names <- c("Floris", "Pieter", "Ramon")
list_values <- c(c(1,2,3), c(2,3,4), c(3,4,5))
for(i in range(1,3)){
test_df$i<- list_values[i]
}
for(i in range(1,3)){
test_df <- cbind(test_df, list_values[i])
}
test_df <- data.frame(row.names=1:4)
test_df <- data.frame(row.names=1:3)
test_df <- data.frame(row.names=1:3)
list_names <- c("Floris", "Pieter", "Ramon")
list_values <- c(c(1,2,3), c(2,3,4), c(3,4,5))
for(i in range(1,3)){
test_df <- cbind(test_df, list_values[i])
}
colnames(test_df) <- list_names
for(i in range(1,4)){
test_df <- cbind(test_df, list_values[i])
}
test_df <- data.frame(row.names=1:3)
list_names <- c("Floris", "Pieter", "Ramon")
list_values <- c(c(1,2,3), c(2,3,4), c(3,4,5))
for(i in range(1,4)){
test_df <- cbind(test_df, list_values[i])
}
test_df <- data.frame(row.names=1:3)
list_names <- c("Floris", "Pieter", "Ramon")
list_values <- c(c(1,2,3), c(2,3,4), c(3,4,5))
for(i in range(1,4)){
print(i)
test_df <- cbind(test_df, list_values[i])
}
for(i in range(1,4,1)){
print(i)
test_df <- cbind(test_df, list_values[i])
}
for(i in seq(1,4,1)){
print(i)
test_df <- cbind(test_df, list_values[i])
}
test_df <- data.frame(row.names=1:3)
list_names <- c("Floris", "Pieter", "Ramon")
list_values <- c(c(1,2,3), c(2,3,4), c(3,4,5))
for(i in seq(1,3,1)){
print(i)
test_df <- cbind(test_df, list_values[i])
}
